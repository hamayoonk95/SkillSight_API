// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using skillsight.API.Data;

#nullable disable

namespace skillsight.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231127205931_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("skillsight.API.moudles.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory");
                });

            modelBuilder.Entity("skillsight.API.moudles.JobPosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("company_name");

                    b.Property<DateTime?>("DateScraped")
                        .HasColumnType("datetime")
                        .HasColumnName("date_scraped");

                    b.Property<string>("JobDescription")
                        .HasColumnType("mediumtext")
                        .HasColumnName("job_description");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("job_title");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "role_id");

                    b.ToTable("job_postings");
                });

            modelBuilder.Entity("skillsight.API.moudles.JobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("RoleTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("job_roles");
                });

            modelBuilder.Entity("skillsight.API.moudles.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "role_id")
                        .HasDatabaseName("role_id1");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("skillsight.API.moudles.RoleSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("Frequency")
                        .HasColumnType("int")
                        .HasColumnName("frequency");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "role_id")
                        .HasDatabaseName("role_id2");

                    b.HasIndex(new[] { "SkillId" }, "skill_id");

                    b.ToTable("role_skills");
                });

            modelBuilder.Entity("skillsight.API.moudles.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("SkillName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("skill_name");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TypeId" }, "type_id");

                    b.ToTable("skills");
                });

            modelBuilder.Entity("skillsight.API.moudles.SkillType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("skill_types");
                });

            modelBuilder.Entity("skillsight.API.moudles.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("users");
                });

            modelBuilder.Entity("skillsight.API.moudles.UserSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SkillId" }, "skill_id")
                        .HasDatabaseName("skill_id1");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.ToTable("user_skills");
                });

            modelBuilder.Entity("skillsight.API.moudles.JobPosting", b =>
                {
                    b.HasOne("skillsight.API.moudles.JobRole", "Role")
                        .WithMany("JobPostings")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("job_postings_ibfk_1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("skillsight.API.moudles.Project", b =>
                {
                    b.HasOne("skillsight.API.moudles.JobRole", "Role")
                        .WithMany("Projects")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("projects_ibfk_2");

                    b.HasOne("skillsight.API.moudles.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .HasConstraintName("projects_ibfk_1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("skillsight.API.moudles.RoleSkill", b =>
                {
                    b.HasOne("skillsight.API.moudles.JobRole", "Role")
                        .WithMany("RoleSkills")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("role_skills_ibfk_1");

                    b.HasOne("skillsight.API.moudles.Skill", "Skill")
                        .WithMany("RoleSkills")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("role_skills_ibfk_2");

                    b.Navigation("Role");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("skillsight.API.moudles.Skill", b =>
                {
                    b.HasOne("skillsight.API.moudles.SkillType", "Type")
                        .WithMany("Skills")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("skills_ibfk_1");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("skillsight.API.moudles.UserSkill", b =>
                {
                    b.HasOne("skillsight.API.moudles.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("user_skills_ibfk_2");

                    b.HasOne("skillsight.API.moudles.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_skills_ibfk_1");

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("skillsight.API.moudles.JobRole", b =>
                {
                    b.Navigation("JobPostings");

                    b.Navigation("Projects");

                    b.Navigation("RoleSkills");
                });

            modelBuilder.Entity("skillsight.API.moudles.Skill", b =>
                {
                    b.Navigation("RoleSkills");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("skillsight.API.moudles.SkillType", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("skillsight.API.moudles.User", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
